[GLOBAL]
#This will create a production, test or devnet version
# d = nada - the last case is dev
# t = testnet
# p = production
deploy_to = d

# create nfts
# 0 = False and will not create the nft entries
# 1 = True and will create the nft entries
deploy_nft = 1

# create whitelist
# 0 = False and will not create the whitelist entries
# 1 = True and will create the whitelist entries
deploy_whitelist = 0

# recreate bech32 
# 0 = False and will not create the bech32 entries
# 1 = True and will create the bech32 entries
recreate_bech32 = 


[DEVELOPMENT]

# contract address to deploy to
contract_address = erd1qqqqqqqqqqqqqpgqdrpate3cvzeg7tahng65ajzqsujxf8z5y4wskmmh0h

# base cid for pics at nft.storage
base_cid = QmRS856rPGWBoFEHGy9cVVQb3SvaQx7VgxB9AmLSrtGRuZ

# base uri for pics at nft.storage
base_uri = gateway.pinata.cloud/ipfs

# 3e8 is hex of 1000 which is 10% (and not the hex vesion os ASCII 1000)
royalties = 500 

# b1a2bc2ec50000 hex version of the number 500000000000000000 which is .5 egld (and not the hex vesion os ASCII 050000000000000000)
selling_price = 500000000000000000

# wallet file for deployment
pem = dev-wallet-owner.pem

# proxy address for elrond
proxy_address = https://devnet-gateway.elrond.com

# chain id for elrond 
chain = D 

# json metadata file
json_path = metadatatest.json

# whitelist file
whitelist_path = whitelist.txt

#file path for the smart contract compiled wassm file
bytecode_path = elrond_minting.wasm

[TEST]

# contract address to deploy to
contract_address = erd1qqqqqqqqqqqqqpgqhfrsthsxd4j78wa000h5y28ltf39maxx0mdqctlh2a

# base cid for pics at nft.storage
base_cid = bafybeiflqvqewnqmprpcpqjd3ws5zfvdl2xdpcgnw3abjr6xu6yxynj4ei

# base uri for pics at nft.storage
base_uri = .ipfs.dweb.link

# 3e8 is hex of 1000 which is 10% (and not the hex vesion os ASCII 1000)
royalties = 1000 

# b1a2bc2ec50000 hex version of the number 500000000000000000 which is .5 egld (and not the hex vesion os ASCII 050000000000000000)
selling_price = 500000000000000000

# wallet file for deployment
pem = testnet.pem

# proxy address for elrond
proxy_address = https://testnet-gateway.elrond.com

# chain id for elrond 
chain = T

# json metadata file
json_path = metadatatest.json

# whitelist file
whitelist_path = whitelist.txt

#file path for the smart contract compiled wassm file
bytecode_path = elrond_minting.wasm

[PRODUCTION]

#contract address to deploy to
contract_address = erd1qqqqqqqqqqqqqpgq9c52cj3c5m85x0upah9tr2hzqfc23xk6ydjsv43jvq

#base cid for pics at nft.storage
base_cid = bafybeiflqvqewnqmprpcpqjd3ws5zfvdl2xdpcgnw3abjr6xu6yxynj4ei

#base uri for pics at nft.storage
base_uri = .ipfs.dweb.link

# 3e8 is hex of 1000 which is 10% (and not the hex vesion os ASCII 1000)
royalties = 1000 

# b1a2bc2ec50000 hex version of the number 500000000000000000 which is .5 egld (and not the hex vesion os ASCII 050000000000000000)
selling_price = 500000000000000000

# wallet file for deployment
pem = onchainwallet.pem

# proxy address for elrond
proxy_address = https://gateway.elrond.com

# json metadata file
chain = 1 

# json metadata file
json_path = metadata.json

# whitelist file
whitelist_path = whitelist.txt

#file path for the smart contract compiled wasm file
bytecode_path = elrond_minting.wasm




 

 